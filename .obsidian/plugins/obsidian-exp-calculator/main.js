/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ExpCalculatorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  lastCalculations: []
};
var CR_TO_XP = {
  "1/8": 25,
  "1/4": 50,
  "1/2": 100,
  "1": 200,
  "2": 450,
  "3": 700,
  "4": 1100,
  "5": 1800,
  "6": 2300,
  "7": 2900,
  "8": 3900,
  "9": 5e3,
  "10": 5900,
  "11": 7200,
  "12": 8400,
  "13": 1e4,
  "14": 11500,
  "15": 13e3,
  "16": 15e3,
  "17": 18e3,
  "18": 2e4,
  "19": 22e3,
  "20": 25e3,
  "21": 33e3,
  "22": 41e3,
  "23": 5e4,
  "24": 62e3,
  "25": 75e3,
  "26": 9e4,
  "27": 105e3,
  "28": 12e4,
  "29": 135e3,
  "30": 155e3
};
var VIEW_TYPE_CALCULATOR = "exp-calculator-view";
var ExpCalculatorPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("dice", "Experience Calculator", () => {
      this.activateView();
    });
    this.addCommand({
      id: "open-exp-calculator",
      name: "Open Experience Calculator",
      callback: () => {
        this.activateView();
      }
    });
    this.registerView(
      VIEW_TYPE_CALCULATOR,
      (leaf) => new ExpCalculatorView(leaf, this)
    );
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_CALCULATOR);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      if (leaf) {
        await leaf.setViewState({
          type: VIEW_TYPE_CALCULATOR,
          active: true
        });
      }
    }
    if (leaf) {
      workspace.revealLeaf(leaf);
    }
  }
  async onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_CALCULATOR);
  }
};
var ExpCalculatorView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return VIEW_TYPE_CALCULATOR;
  }
  getDisplayText() {
    return "Experience Calculator";
  }
  getIcon() {
    return "dice";
  }
  async onOpen() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("exp-calculator-container");
    this.render();
  }
  render() {
    const container = this.containerEl;
    container.createEl("h2", { text: "\u041A\u0430\u043B\u044C\u043A\u0443\u043B\u044F\u0442\u043E\u0440 \u043E\u043F\u044B\u0442\u0430" });
    container.createEl("label", { text: "\u041A\u043B\u0430\u0441\u0441 \u043E\u043F\u0430\u0441\u043D\u043E\u0441\u0442\u0438: " });
    this.challengeRatingSelect = container.createEl("select");
    Object.keys(CR_TO_XP).forEach((cr) => {
      const option = this.challengeRatingSelect.createEl("option");
      option.value = cr;
      option.text = cr;
    });
    container.createEl("label", { text: "\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0432\u0440\u0430\u0433\u043E\u0432: " });
    this.enemyCountInput = container.createEl("input", { type: "number" });
    this.enemyCountInput.setAttribute("min", "1");
    this.enemyCountInput.value = "1";
    container.createEl("label", { text: "\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0438\u0433\u0440\u043E\u043A\u043E\u0432: " });
    this.playerCountInput = container.createEl("input", { type: "number" });
    this.playerCountInput.setAttribute("min", "1");
    this.playerCountInput.value = "1";
    const calculateButton = container.createEl("button", { text: "\u0420\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044C" });
    calculateButton.addEventListener("click", () => this.calculate());
    this.resultDisplay = container.createEl("div", { cls: "result-display" });
    container.createEl("h3", { text: "\u0418\u0441\u0442\u043E\u0440\u0438\u044F \u0440\u0430\u0441\u0447\u0435\u0442\u043E\u0432" });
    this.historyContainer = container.createEl("div", { cls: "history-container" });
    this.updateHistory();
  }
  calculate() {
    const cr = this.challengeRatingSelect.value;
    const enemyCount = parseInt(this.enemyCountInput.value);
    const playerCount = parseInt(this.playerCountInput.value);
    if (isNaN(enemyCount) || isNaN(playerCount) || enemyCount < 1 || playerCount < 1) {
      this.resultDisplay.textContent = "Please enter valid numbers";
      return;
    }
    const baseXP = CR_TO_XP[cr];
    const totalXP = baseXP * enemyCount / playerCount;
    this.resultDisplay.textContent = `\u041A\u0430\u0436\u0434\u044B\u0439 \u0438\u0433\u0440\u043E\u043A \u043F\u043E\u043B\u0443\u0447\u0430\u0435\u0442: ${Math.round(totalXP)} XP`;
    this.plugin.settings.lastCalculations.unshift({
      challengeRating: cr,
      enemyCount,
      playerCount,
      result: Math.round(totalXP),
      timestamp: Date.now()
    });
    if (this.plugin.settings.lastCalculations.length > 5) {
      this.plugin.settings.lastCalculations.pop();
    }
    this.plugin.saveSettings();
    this.updateHistory();
  }
  updateHistory() {
    this.historyContainer.empty();
    this.plugin.settings.lastCalculations.forEach((calc) => {
      const historyItem = this.historyContainer.createEl("div", { cls: "history-item" });
      historyItem.textContent = `CR ${calc.challengeRating} \xD7 ${calc.enemyCount} \u0432\u0440\u0430\u0433\u043E\u0432 / ${calc.playerCount} \u0438\u0433\u0440\u043E\u043A\u043E\u0432 = ${calc.result} XP`;
    });
  }
};
