/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => ImageAddPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  defaultSize: 200,
  defaultAlignment: "center"
};
var ASSETS_FOLDER = "99 - \u041E\u0431\u0449\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044B/99 - \u041E\u0441\u0442\u0430\u043B\u044C\u043D\u043E\u0435/\u0410\u0441\u0441\u0435\u0442\u044B";
var IMAGE_ADD_VIEW_TYPE = "image-add-view";
var ImageAddPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.view = null;
  }
  async onload() {
    await this.loadSettings();
    this.registerView(IMAGE_ADD_VIEW_TYPE, (leaf) => this.view = new ImageAddView(leaf, this));
    this.addRibbonIcon("image", "Image Add", () => {
      this.activateView();
    });
  }
  async activateView() {
    let leaf = this.app.workspace.getLeavesOfType(IMAGE_ADD_VIEW_TYPE)[0];
    if (!leaf) {
      const rightLeaf = this.app.workspace.getRightLeaf(false);
      if (!rightLeaf)
        return;
      leaf = rightLeaf;
      await leaf.setViewState({
        type: IMAGE_ADD_VIEW_TYPE,
        active: true
      });
    }
    this.app.workspace.revealLeaf(leaf);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ImageAddView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.selectedFile = null;
    this.selectedImage = "";
    this.selectedSize = 200;
    this.selectedAlignment = "center";
    this.fileNameInput = null;
    this.extSpan = null;
    this.saveButton = null;
    this.allowedExt = "";
    this.plugin = plugin;
  }
  getViewType() {
    return IMAGE_ADD_VIEW_TYPE;
  }
  getDisplayText() {
    return "Image Add";
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("image-add-modal");
    contentEl.createEl("h2", { text: "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435" });
    const selectButton = contentEl.createEl("button", {
      text: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435",
      cls: "mod-cta"
    });
    selectButton.addEventListener("click", async () => {
      const input = document.createElement("input");
      input.type = "file";
      input.accept = ".jpg,.jpeg,.png";
      input.onchange = async (e) => {
        var _a, _b;
        const file = (_a = e.target.files) == null ? void 0 : _a[0];
        if (!file)
          return;
        const ext = (_b = file.name.split(".").pop()) == null ? void 0 : _b.toLowerCase();
        if (ext !== "jpg" && ext !== "jpeg" && ext !== "png") {
          new import_obsidian.Notice("\u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043D\u044B \u0442\u043E\u043B\u044C\u043A\u043E \u0444\u0430\u0439\u043B\u044B .jpg \u0438 .png");
          this.selectedFile = null;
          this.allowedExt = "";
          this.updateFileNameInput();
          this.updateSaveButton();
          return;
        }
        this.selectedFile = file;
        this.allowedExt = ext === "jpeg" ? "jpg" : ext;
        this.selectedImage = file.name.substring(0, file.name.lastIndexOf("."));
        this.updateFileNameInput();
        this.updateSaveButton();
      };
      input.click();
    });
    const fileNameContainer = contentEl.createEl("div", { cls: "setting-item" });
    fileNameContainer.createEl("label", { text: "\u0418\u043C\u044F \u0444\u0430\u0439\u043B\u0430: " });
    this.fileNameInput = fileNameContainer.createEl("input", {
      type: "text",
      value: this.selectedImage
    });
    this.extSpan = fileNameContainer.createEl("span", { text: "", cls: "file-ext-span" });
    this.fileNameInput.addEventListener("input", () => {
      this.selectedImage = this.fileNameInput.value;
      this.updateSaveButton();
    });
    const sizeContainer = contentEl.createEl("div", { cls: "setting-item" });
    sizeContainer.createEl("label", { text: "\u0420\u0430\u0437\u043C\u0435\u0440: " });
    const sizeSelect = sizeContainer.createEl("select");
    [100, 150, 200, 250, 300].forEach((size) => {
      const option = sizeSelect.createEl("option", {
        text: size.toString(),
        value: size.toString()
      });
      if (size === this.selectedSize) {
        option.selected = true;
      }
    });
    sizeSelect.addEventListener("change", (e) => {
      this.selectedSize = parseInt(e.target.value);
    });
    const alignmentContainer = contentEl.createEl("div", { cls: "setting-item" });
    alignmentContainer.createEl("label", { text: "\u0412\u044B\u0440\u0430\u0432\u043D\u0438\u0432\u0430\u043D\u0438\u0435: " });
    const alignmentSelect = alignmentContainer.createEl("select");
    ["left", "center", "right"].forEach((alignment) => {
      const option = alignmentSelect.createEl("option", {
        text: alignment,
        value: alignment
      });
      if (alignment === this.selectedAlignment) {
        option.selected = true;
      }
    });
    alignmentSelect.addEventListener("change", (e) => {
      this.selectedAlignment = e.target.value;
    });
    this.saveButton = contentEl.createEl("button", {
      text: "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C",
      cls: "mod-cta"
    });
    this.saveButton.addEventListener("click", () => this.saveImage());
    this.updateFileNameInput();
    this.updateSaveButton();
  }
  updateFileNameInput() {
    if (this.fileNameInput) {
      this.fileNameInput.value = this.selectedImage || "";
      this.fileNameInput.disabled = !this.selectedFile;
    }
    if (this.extSpan) {
      this.extSpan.setText(this.allowedExt ? "." + this.allowedExt : "");
    }
  }
  updateSaveButton() {
    if (this.saveButton) {
      this.saveButton.disabled = !this.selectedFile || !this.selectedImage || !this.allowedExt;
    }
  }
  async saveImage() {
    if (!this.selectedFile || !this.selectedImage || !this.allowedExt)
      return;
    const newFileName = this.selectedImage.replace(/[\\/:*?"<>|]/g, "") + "." + this.allowedExt;
    const filePath = `${ASSETS_FOLDER}/${newFileName}`;
    const folder = this.app.vault.getAbstractFileByPath(ASSETS_FOLDER);
    if (!folder) {
      await this.app.vault.createFolder(ASSETS_FOLDER);
    }
    const reader = new FileReader();
    reader.onload = async (event) => {
      var _a;
      if (!((_a = event.target) == null ? void 0 : _a.result))
        return;
      const arrayBuffer = event.target.result;
      try {
        await this.app.vault.createBinary(filePath, arrayBuffer);
        this.selectedFile = null;
        this.selectedImage = "";
        this.allowedExt = "";
        this.updateFileNameInput();
        this.updateSaveButton();
        new import_obsidian.Notice("\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 \u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u043E");
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (activeView) {
          const editor = activeView.editor;
          const cursor = editor.getCursor();
          const imageText = `![[${newFileName}|${this.selectedAlignment}|${this.selectedSize}]]`;
          editor.replaceRange(imageText, cursor);
        }
      } catch (error) {
        new import_obsidian.Notice("\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u0438 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F");
        console.error(error);
      }
    };
    reader.readAsArrayBuffer(this.selectedFile);
  }
  async onClose() {
    this.contentEl.empty();
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
//# sourceMappingURL=data:application/json;base64,
