/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => ImageAddPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  defaultSize: 200,
  defaultAlignment: "center"
};
var ImageAddPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("image", "Image Add", () => {
      new ImageAddModal(this.app, this).open();
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ImageAddModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
    this.selectedImage = "";
    this.selectedSize = 200;
    this.selectedAlignment = "center";
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("image-add-modal");
    contentEl.createEl("h2", { text: "Add Image" });
    const selectButton = contentEl.createEl("button", {
      text: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435",
      cls: "mod-cta"
    });
    selectButton.addEventListener("click", async () => {
      const files = this.app.vault.getFiles();
      const imageFiles = files.filter((file) => file.extension === "png" || file.extension === "jpg" || file.extension === "jpeg" || file.extension === "gif");
      if (imageFiles.length === 0) {
        new import_obsidian.Notice("No images found in vault");
        return;
      }
      this.selectedImage = imageFiles[0].basename;
      this.updatePreview();
    });
    const sizeContainer = contentEl.createEl("div", { cls: "setting-item" });
    sizeContainer.createEl("label", { text: "Size: " });
    const sizeSelect = sizeContainer.createEl("select");
    [100, 150, 200, 250, 300].forEach((size) => {
      const option = sizeSelect.createEl("option", {
        text: size.toString(),
        value: size.toString()
      });
      if (size === this.selectedSize) {
        option.selected = true;
      }
    });
    sizeSelect.addEventListener("change", (e) => {
      this.selectedSize = parseInt(e.target.value);
      this.updatePreview();
    });
    const alignmentContainer = contentEl.createEl("div", { cls: "setting-item" });
    alignmentContainer.createEl("label", { text: "Alignment: " });
    const alignmentSelect = alignmentContainer.createEl("select");
    ["left", "center", "right"].forEach((alignment) => {
      const option = alignmentSelect.createEl("option", {
        text: alignment,
        value: alignment
      });
      if (alignment === this.selectedAlignment) {
        option.selected = true;
      }
    });
    alignmentSelect.addEventListener("change", (e) => {
      this.selectedAlignment = e.target.value;
      this.updatePreview();
    });
    const addButton = contentEl.createEl("button", {
      text: "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C",
      cls: "mod-cta"
    });
    addButton.addEventListener("click", () => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (activeView) {
        const editor = activeView.editor;
        const cursor = editor.getCursor();
        const imageText = `![[${this.selectedImage}|${this.selectedAlignment}|${this.selectedSize}]]`;
        editor.replaceRange(imageText, cursor);
      }
      this.close();
    });
  }
  updatePreview() {
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
//# sourceMappingURL=data:application/json;base64,
