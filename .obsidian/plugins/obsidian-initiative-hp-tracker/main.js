/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  InitiativeTrackerView: () => InitiativeTrackerView,
  default: () => InitiativeTrackerPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var VIEW_TYPE = "initiative-tracker-view";
var InitiativeTrackerView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.combatants = [];
    this.plugin = plugin;
  }
  getViewType() {
    return VIEW_TYPE;
  }
  getDisplayText() {
    return "\u0422\u0440\u0435\u043A\u0435\u0440 \u0418\u043D\u0438\u0446\u0438\u0430\u0442\u0438\u0432\u044B \u0438 \u0425\u041F";
  }
  async onOpen() {
    this.combatants = await this.plugin.loadCombatants();
    const container = this.containerEl;
    container.empty();
    container.addClass("initiative-tracker");
    container.addClass("initiative-tracker-scroll");
    this.renderTracker(container);
  }
  async saveAndRender() {
    await this.plugin.saveCombatants(this.combatants);
    const list = this.containerEl.querySelector(".combatant-list");
    if (list instanceof HTMLElement) {
      this.renderCombatants(list);
    }
  }
  renderTracker(container) {
    const header = container.createDiv("initiative-tracker-header");
    header.style.justifyContent = "center";
    const addButton = header.createEl("button");
    addButton.addClass("add-combatant-btn");
    addButton.innerHTML = '<span class="plus-icon">+</span>';
    addButton.title = "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0443\u0447\u0430\u0441\u0442\u043D\u0438\u043A\u0430";
    addButton.addEventListener("click", () => this.showAddCombatantModal());
    const list = container.createDiv("combatant-list");
    this.renderCombatants(list);
  }
  renderCombatants(container) {
    container.empty();
    const sortedCombatants = [...this.combatants].sort((a, b) => b.initiative - a.initiative);
    sortedCombatants.forEach((combatant) => {
      const item = container.createDiv("combatant-item");
      const header = item.createDiv("combatant-header");
      const nameDiv = header.createDiv("combatant-name");
      nameDiv.setText(combatant.name);
      const initiativeDiv = header.createDiv("combatant-initiative");
      initiativeDiv.setText(`\u0418\u043D\u0438\u0446\u0438\u0430\u0442\u0438\u0432\u0430: ${combatant.initiative}`);
      const removeBtn = header.createEl("button");
      removeBtn.className = "remove-combatant-btn";
      removeBtn.innerHTML = '<span class="remove-icon">&times;</span>';
      removeBtn.title = "\u0423\u0434\u0430\u043B\u0438\u0442\u044C";
      removeBtn.addEventListener("click", async () => {
        this.combatants = this.combatants.filter((c) => c.id !== combatant.id);
        await this.saveAndRender();
      });
      const hpBarContainer = item.createDiv("hp-bar-container");
      hpBarContainer.style.position = "relative";
      const hpBarBg = hpBarContainer.createDiv("hp-bar-bg");
      const tempHpBar = hpBarContainer.createDiv("temp-hp-bar");
      const hpBar = hpBarContainer.createDiv("hp-bar");
      const hpPercentage = combatant.currentHp / combatant.maxHp * 100;
      const tempHpPercentage = combatant.tempHp / combatant.maxHp * 100;
      hpBar.style.width = `${Math.max(0, Math.min(100, hpPercentage))}%`;
      tempHpBar.style.width = `${Math.max(0, Math.min(100, tempHpPercentage))}%`;
      if (combatant.tempHp >= combatant.maxHp) {
        tempHpBar.style.borderRadius = "8px";
      } else {
        tempHpBar.style.borderRadius = "8px 0 0 8px";
      }
      tempHpBar.style.opacity = combatant.tempHp > 0 ? "0.7" : "0";
      if (hpPercentage < 25) {
        hpBar.style.backgroundColor = "#e74c3c";
      } else if (hpPercentage < 50) {
        hpBar.style.backgroundColor = "#f39c12";
      } else {
        hpBar.style.backgroundColor = "var(--interactive-accent)";
      }
      item.createDiv("hp-text").setText(`\u0425\u041F: ${combatant.currentHp}/${combatant.maxHp}${combatant.tempHp > 0 ? ` + ${combatant.tempHp} \u0432\u0440\u0435\u043C.` : ""}`);
      const controls = item.createDiv("hp-controls");
      const damageInput = controls.createEl("input");
      damageInput.type = "number";
      damageInput.className = "damage-input";
      damageInput.placeholder = "\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E";
      const damageBtn = controls.createEl("button");
      damageBtn.className = "action-btn damage-btn";
      damageBtn.setText("\u0423\u0440\u043E\u043D");
      const healBtn = controls.createEl("button");
      healBtn.className = "action-btn heal-btn";
      healBtn.setText("\u041B\u0435\u0447\u0435\u043D\u0438\u0435");
      const tempHpBtn = controls.createEl("button");
      tempHpBtn.className = "action-btn temp-hp-btn";
      tempHpBtn.setText("\u0412\u0440\u0435\u043C\u0435\u043D\u043D\u043E\u0435 \u0425\u041F");
      damageBtn.addEventListener("click", async () => {
        const amount = parseInt(damageInput.value) || 0;
        if (amount > 0) {
          this.applyDamage(combatant.id, amount);
          damageInput.value = "";
          await this.saveAndRender();
        }
      });
      healBtn.addEventListener("click", async () => {
        const amount = parseInt(damageInput.value) || 0;
        if (amount > 0) {
          this.applyHeal(combatant.id, amount);
          damageInput.value = "";
          await this.saveAndRender();
        }
      });
      tempHpBtn.addEventListener("click", async () => {
        const amount = parseInt(damageInput.value) || 0;
        if (amount > 0) {
          this.applyTempHp(combatant.id, amount);
          damageInput.value = "";
          await this.saveAndRender();
        }
      });
    });
  }
  showAddCombatantModal() {
    new AddCombatantModal(this.app, async (combatant) => {
      this.combatants.push(combatant);
      await this.saveAndRender();
    }).open();
  }
  applyDamage(combatantId, amount) {
    const combatant = this.combatants.find((c) => c.id === combatantId);
    if (!combatant)
      return;
    if (combatant.tempHp > 0) {
      if (combatant.tempHp >= amount) {
        combatant.tempHp -= amount;
        amount = 0;
      } else {
        amount -= combatant.tempHp;
        combatant.tempHp = 0;
      }
    }
    combatant.currentHp = Math.max(0, combatant.currentHp - amount);
  }
  applyHeal(combatantId, amount) {
    const combatant = this.combatants.find((c) => c.id === combatantId);
    if (!combatant)
      return;
    combatant.currentHp = Math.min(combatant.maxHp, combatant.currentHp + amount);
  }
  applyTempHp(combatantId, amount) {
    const combatant = this.combatants.find((c) => c.id === combatantId);
    if (!combatant)
      return;
    combatant.tempHp = amount;
  }
};
var AddCombatantModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2").setText("\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0443\u0447\u0430\u0441\u0442\u043D\u0438\u043A\u0430");
    let name = "", initiative = "", maxHp = "";
    new import_obsidian.Setting(contentEl).setName("\u0418\u043C\u044F").addText((text) => text.setPlaceholder("\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043C\u044F").onChange((val) => {
      name = val;
    }));
    new import_obsidian.Setting(contentEl).setName("\u0418\u043D\u0438\u0446\u0438\u0430\u0442\u0438\u0432\u0430").addText((text) => text.setPlaceholder("\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043D\u0438\u0446\u0438\u0430\u0442\u0438\u0432\u0443").onChange((val) => {
      initiative = val;
    }));
    new import_obsidian.Setting(contentEl).setName("\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u0425\u041F").addText((text) => text.setPlaceholder("\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u0425\u041F").onChange((val) => {
      maxHp = val;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C").onClick(() => {
      const n = name.trim();
      const i = parseInt(initiative) || 0;
      const m = parseInt(maxHp) || 0;
      if (n && m > 0) {
        this.onSubmit({
          id: Date.now().toString(),
          name: n,
          initiative: i,
          maxHp: m,
          currentHp: m,
          tempHp: 0
        });
        this.close();
      }
    }));
  }
  onClose() {
    this.contentEl.empty();
  }
};
var InitiativeTrackerPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerView(VIEW_TYPE, (leaf) => new InitiativeTrackerView(leaf, this));
    this.addRibbonIcon("plus", "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0442\u0440\u0435\u043A\u0435\u0440 \u0438\u043D\u0438\u0446\u0438\u0430\u0442\u0438\u0432\u044B", () => {
      this.activateView();
    });
  }
  async activateView() {
    let leaf = this.app.workspace.getLeavesOfType(VIEW_TYPE)[0];
    if (!leaf) {
      const newLeaf = this.app.workspace.getRightLeaf(false);
      if (newLeaf) {
        await newLeaf.setViewState({
          type: VIEW_TYPE,
          active: true
        });
        this.app.workspace.revealLeaf(newLeaf);
      }
    } else {
      this.app.workspace.revealLeaf(leaf);
    }
  }
  async saveCombatants(combatants) {
    await this.saveData(combatants);
  }
  async loadCombatants() {
    const data = await this.loadData();
    return Array.isArray(data) ? data : [];
  }
};
//# sourceMappingURL=data:application/json;base64,
