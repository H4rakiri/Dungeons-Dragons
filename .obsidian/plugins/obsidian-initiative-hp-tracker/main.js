/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  InitiativeTrackerView: () => InitiativeTrackerView,
  default: () => InitiativeTrackerPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var VIEW_TYPE = "initiative-tracker-view";
var InitiativeTrackerView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.combatants = [];
    this.plugin = plugin;
  }
  getViewType() {
    return VIEW_TYPE;
  }
  getDisplayText() {
    return "\u0422\u0440\u0435\u043A\u0435\u0440 \u0418\u043D\u0438\u0446\u0438\u0430\u0442\u0438\u0432\u044B \u0438 \u0425\u041F";
  }
  async onOpen() {
    this.combatants = await this.plugin.loadCombatants();
    const container = this.containerEl;
    container.empty();
    container.addClass("initiative-tracker");
    container.addClass("initiative-tracker-scroll");
    this.renderTracker(container);
  }
  async saveAndRender() {
    await this.plugin.saveCombatants(this.combatants);
    const list = this.containerEl.querySelector(".combatant-list");
    if (list instanceof HTMLElement) {
      this.renderCombatants(list);
    }
  }
  renderTracker(container) {
    const header = container.createDiv("initiative-tracker-header");
    header.style.justifyContent = "center";
    const addButton = header.createEl("button");
    addButton.addClass("add-combatant-btn");
    addButton.innerHTML = '<span class="plus-icon">+</span>';
    addButton.title = "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0443\u0447\u0430\u0441\u0442\u043D\u0438\u043A\u0430";
    addButton.addEventListener("click", () => this.showAddCombatantModal());
    const list = container.createDiv("combatant-list");
    this.renderCombatants(list);
  }
  renderCombatants(container) {
    container.empty();
    const sortedCombatants = [...this.combatants].sort((a, b) => b.initiative - a.initiative);
    sortedCombatants.forEach((combatant) => {
      const item = container.createDiv("combatant-item");
      const header = item.createDiv("combatant-header");
      const nameDiv = header.createDiv("combatant-name");
      nameDiv.setText(combatant.name);
      const initiativeDiv = header.createDiv("combatant-initiative");
      initiativeDiv.setText(`\u0418\u043D\u0438\u0446\u0438\u0430\u0442\u0438\u0432\u0430: ${combatant.initiative}`);
      const removeBtn = header.createEl("button");
      removeBtn.className = "remove-combatant-btn";
      removeBtn.innerHTML = '<span class="remove-icon">&times;</span>';
      removeBtn.title = "\u0423\u0434\u0430\u043B\u0438\u0442\u044C";
      removeBtn.addEventListener("click", async () => {
        this.combatants = this.combatants.filter((c) => c.id !== combatant.id);
        await this.saveAndRender();
      });
      const hpBarContainer = item.createDiv("hp-bar-container");
      hpBarContainer.style.position = "relative";
      const tempHpBar = hpBarContainer.createDiv("temp-hp-bar");
      const hpBar = hpBarContainer.createDiv("hp-bar");
      const hpPercentage = combatant.currentHp / combatant.maxHp * 100;
      const tempHpPercentage = combatant.tempHp / combatant.maxHp * 100;
      hpBar.style.width = `${Math.max(0, Math.min(100, hpPercentage))}%`;
      tempHpBar.style.width = `${Math.max(0, Math.min(100, tempHpPercentage))}%`;
      if (combatant.tempHp >= combatant.maxHp) {
        tempHpBar.style.borderRadius = "8px";
      } else {
        tempHpBar.style.borderRadius = "8px 0 0 8px";
      }
      tempHpBar.style.opacity = combatant.tempHp > 0 ? "0.7" : "0";
      if (hpPercentage < 25) {
        hpBar.style.backgroundColor = "#e74c3c";
      } else if (hpPercentage < 50) {
        hpBar.style.backgroundColor = "#f39c12";
      } else {
        hpBar.style.backgroundColor = "var(--interactive-accent)";
      }
      item.createDiv("hp-text").setText(`\u0425\u041F: ${combatant.currentHp}/${combatant.maxHp}${combatant.tempHp > 0 ? ` + ${combatant.tempHp} \u0432\u0440\u0435\u043C.` : ""}`);
      const controls = item.createDiv("hp-controls");
      const damageInput = controls.createEl("input");
      damageInput.type = "number";
      damageInput.className = "damage-input";
      damageInput.placeholder = "\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E";
      const damageBtn = controls.createEl("button");
      damageBtn.className = "action-btn damage-btn";
      damageBtn.setText("\u0423\u0440\u043E\u043D");
      const healBtn = controls.createEl("button");
      healBtn.className = "action-btn heal-btn";
      healBtn.setText("\u041B\u0435\u0447\u0435\u043D\u0438\u0435");
      const tempHpBtn = controls.createEl("button");
      tempHpBtn.className = "action-btn temp-hp-btn";
      tempHpBtn.setText("\u0412\u0440\u0435\u043C\u0435\u043D\u043D\u043E\u0435 \u0425\u041F");
      damageBtn.addEventListener("click", async () => {
        const amount = parseInt(damageInput.value) || 0;
        if (amount > 0) {
          this.applyDamage(combatant.id, amount);
          damageInput.value = "";
          await this.saveAndRender();
        }
      });
      healBtn.addEventListener("click", async () => {
        const amount = parseInt(damageInput.value) || 0;
        if (amount > 0) {
          this.applyHeal(combatant.id, amount);
          damageInput.value = "";
          await this.saveAndRender();
        }
      });
      tempHpBtn.addEventListener("click", async () => {
        const amount = parseInt(damageInput.value) || 0;
        if (amount > 0) {
          this.applyTempHp(combatant.id, amount);
          damageInput.value = "";
          await this.saveAndRender();
        }
      });
    });
  }
  showAddCombatantModal() {
    new AddCombatantModal(this.app, async (combatant) => {
      this.combatants.push(combatant);
      await this.saveAndRender();
    }).open();
  }
  applyDamage(combatantId, amount) {
    const combatant = this.combatants.find((c) => c.id === combatantId);
    if (!combatant)
      return;
    if (combatant.tempHp > 0) {
      if (combatant.tempHp >= amount) {
        combatant.tempHp -= amount;
        amount = 0;
      } else {
        amount -= combatant.tempHp;
        combatant.tempHp = 0;
      }
    }
    combatant.currentHp = Math.max(0, combatant.currentHp - amount);
  }
  applyHeal(combatantId, amount) {
    const combatant = this.combatants.find((c) => c.id === combatantId);
    if (!combatant)
      return;
    combatant.currentHp = Math.min(combatant.maxHp, combatant.currentHp + amount);
  }
  applyTempHp(combatantId, amount) {
    const combatant = this.combatants.find((c) => c.id === combatantId);
    if (!combatant)
      return;
    combatant.tempHp = amount;
  }
};
var AddCombatantModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2").setText("\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0443\u0447\u0430\u0441\u0442\u043D\u0438\u043A\u0430");
    let name = "", initiative = "", maxHp = "";
    new import_obsidian.Setting(contentEl).setName("\u0418\u043C\u044F").addText((text) => text.setPlaceholder("\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043C\u044F").onChange((val) => {
      name = val;
    }));
    new import_obsidian.Setting(contentEl).setName("\u0418\u043D\u0438\u0446\u0438\u0430\u0442\u0438\u0432\u0430").addText((text) => text.setPlaceholder("\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043D\u0438\u0446\u0438\u0430\u0442\u0438\u0432\u0443").onChange((val) => {
      initiative = val;
    }));
    new import_obsidian.Setting(contentEl).setName("\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u0425\u041F").addText((text) => text.setPlaceholder("\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u0425\u041F").onChange((val) => {
      maxHp = val;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C").onClick(() => {
      const n = name.trim();
      const i = parseInt(initiative) || 0;
      const m = parseInt(maxHp) || 0;
      if (n && m > 0) {
        this.onSubmit({
          id: Date.now().toString(),
          name: n,
          initiative: i,
          maxHp: m,
          currentHp: m,
          tempHp: 0
        });
        this.close();
      }
    }));
  }
  onClose() {
    this.contentEl.empty();
  }
};
var InitiativeTrackerPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerView(VIEW_TYPE, (leaf) => new InitiativeTrackerView(leaf, this));
    this.addRibbonIcon("plus", "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0442\u0440\u0435\u043A\u0435\u0440 \u0438\u043D\u0438\u0446\u0438\u0430\u0442\u0438\u0432\u044B", () => {
      this.activateView();
    });
  }
  async activateView() {
    let leaf = this.app.workspace.getLeavesOfType(VIEW_TYPE)[0];
    if (!leaf) {
      const newLeaf = this.app.workspace.getRightLeaf(false);
      if (newLeaf) {
        await newLeaf.setViewState({
          type: VIEW_TYPE,
          active: true
        });
        this.app.workspace.revealLeaf(newLeaf);
      }
    } else {
      this.app.workspace.revealLeaf(leaf);
    }
  }
  async saveCombatants(combatants) {
    await this.saveData(combatants);
  }
  async loadCombatants() {
    const data = await this.loadData();
    return Array.isArray(data) ? data : [];
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBJdGVtVmlldywgV29ya3NwYWNlTGVhZiwgTW9kYWwsIFNldHRpbmcsIFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbmludGVyZmFjZSBDb21iYXRhbnQge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIGluaXRpYXRpdmU6IG51bWJlcjtcclxuICAgIG1heEhwOiBudW1iZXI7XHJcbiAgICBjdXJyZW50SHA6IG51bWJlcjtcclxuICAgIHRlbXBIcDogbnVtYmVyO1xyXG59XHJcblxyXG5jb25zdCBWSUVXX1RZUEUgPSAnaW5pdGlhdGl2ZS10cmFja2VyLXZpZXcnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEluaXRpYXRpdmVUcmFja2VyVmlldyBleHRlbmRzIEl0ZW1WaWV3IHtcclxuICAgIGNvbWJhdGFudHM6IENvbWJhdGFudFtdID0gW107XHJcbiAgICBwbHVnaW46IEluaXRpYXRpdmVUcmFja2VyUGx1Z2luO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIHBsdWdpbjogSW5pdGlhdGl2ZVRyYWNrZXJQbHVnaW4pIHtcclxuICAgICAgICBzdXBlcihsZWFmKTtcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRWaWV3VHlwZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBWSUVXX1RZUEU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGlzcGxheVRleHQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gJ1x1MDQyMlx1MDQ0MFx1MDQzNVx1MDQzQVx1MDQzNVx1MDQ0MCBcdTA0MThcdTA0M0RcdTA0MzhcdTA0NDZcdTA0MzhcdTA0MzBcdTA0NDJcdTA0MzhcdTA0MzJcdTA0NEIgXHUwNDM4IFx1MDQyNVx1MDQxRic7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb25PcGVuKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHRoaXMuY29tYmF0YW50cyA9IGF3YWl0IHRoaXMucGx1Z2luLmxvYWRDb21iYXRhbnRzKCk7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXJFbDtcclxuICAgICAgICBjb250YWluZXIuZW1wdHkoKTtcclxuICAgICAgICBjb250YWluZXIuYWRkQ2xhc3MoJ2luaXRpYXRpdmUtdHJhY2tlcicpO1xyXG4gICAgICAgIGNvbnRhaW5lci5hZGRDbGFzcygnaW5pdGlhdGl2ZS10cmFja2VyLXNjcm9sbCcpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyVHJhY2tlcihjb250YWluZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNhdmVBbmRSZW5kZXIoKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZUNvbWJhdGFudHModGhpcy5jb21iYXRhbnRzKTtcclxuICAgICAgICBjb25zdCBsaXN0ID0gdGhpcy5jb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKCcuY29tYmF0YW50LWxpc3QnKTtcclxuICAgICAgICBpZiAobGlzdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyQ29tYmF0YW50cyhsaXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyVHJhY2tlcihjb250YWluZXI6IEhUTUxFbGVtZW50KTogdm9pZCB7XHJcbiAgICAgICAgLy8gSGVhZGVyIHdpdGggY2VudGVyZWQgcGx1cyBidXR0b25cclxuICAgICAgICBjb25zdCBoZWFkZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KCdpbml0aWF0aXZlLXRyYWNrZXItaGVhZGVyJyk7XHJcbiAgICAgICAgaGVhZGVyLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gJ2NlbnRlcic7XHJcbiAgICAgICAgY29uc3QgYWRkQnV0dG9uID0gaGVhZGVyLmNyZWF0ZUVsKCdidXR0b24nKTtcclxuICAgICAgICBhZGRCdXR0b24uYWRkQ2xhc3MoJ2FkZC1jb21iYXRhbnQtYnRuJyk7XHJcbiAgICAgICAgYWRkQnV0dG9uLmlubmVySFRNTCA9ICc8c3BhbiBjbGFzcz1cInBsdXMtaWNvblwiPis8L3NwYW4+JztcclxuICAgICAgICBhZGRCdXR0b24udGl0bGUgPSAnXHUwNDE0XHUwNDNFXHUwNDMxXHUwNDMwXHUwNDMyXHUwNDM4XHUwNDQyXHUwNDRDIFx1MDQ0M1x1MDQ0N1x1MDQzMFx1MDQ0MVx1MDQ0Mlx1MDQzRFx1MDQzOFx1MDQzQVx1MDQzMCc7XHJcbiAgICAgICAgYWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5zaG93QWRkQ29tYmF0YW50TW9kYWwoKSk7XHJcblxyXG4gICAgICAgIC8vIENvbWJhdGFudCBsaXN0XHJcbiAgICAgICAgY29uc3QgbGlzdCA9IGNvbnRhaW5lci5jcmVhdGVEaXYoJ2NvbWJhdGFudC1saXN0Jyk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJDb21iYXRhbnRzKGxpc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNvbWJhdGFudHMoY29udGFpbmVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnRhaW5lci5lbXB0eSgpO1xyXG4gICAgICAgIC8vIFNvcnQgY29tYmF0YW50cyBieSBpbml0aWF0aXZlXHJcbiAgICAgICAgY29uc3Qgc29ydGVkQ29tYmF0YW50cyA9IFsuLi50aGlzLmNvbWJhdGFudHNdLnNvcnQoKGEsIGIpID0+IGIuaW5pdGlhdGl2ZSAtIGEuaW5pdGlhdGl2ZSk7XHJcbiAgICAgICAgc29ydGVkQ29tYmF0YW50cy5mb3JFYWNoKGNvbWJhdGFudCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBjb250YWluZXIuY3JlYXRlRGl2KCdjb21iYXRhbnQtaXRlbScpO1xyXG4gICAgICAgICAgICAvLyBIZWFkZXIgd2l0aCBuYW1lLCBpbml0aWF0aXZlLCBhbmQgcmVtb3ZlIGJ1dHRvblxyXG4gICAgICAgICAgICBjb25zdCBoZWFkZXIgPSBpdGVtLmNyZWF0ZURpdignY29tYmF0YW50LWhlYWRlcicpO1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lRGl2ID0gaGVhZGVyLmNyZWF0ZURpdignY29tYmF0YW50LW5hbWUnKTtcclxuICAgICAgICAgICAgbmFtZURpdi5zZXRUZXh0KGNvbWJhdGFudC5uYW1lKTtcclxuICAgICAgICAgICAgY29uc3QgaW5pdGlhdGl2ZURpdiA9IGhlYWRlci5jcmVhdGVEaXYoJ2NvbWJhdGFudC1pbml0aWF0aXZlJyk7XHJcbiAgICAgICAgICAgIGluaXRpYXRpdmVEaXYuc2V0VGV4dChgXHUwNDE4XHUwNDNEXHUwNDM4XHUwNDQ2XHUwNDM4XHUwNDMwXHUwNDQyXHUwNDM4XHUwNDMyXHUwNDMwOiAke2NvbWJhdGFudC5pbml0aWF0aXZlfWApO1xyXG4gICAgICAgICAgICAvLyBSZW1vdmUgYnV0dG9uXHJcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZUJ0biA9IGhlYWRlci5jcmVhdGVFbCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIHJlbW92ZUJ0bi5jbGFzc05hbWUgPSAncmVtb3ZlLWNvbWJhdGFudC1idG4nO1xyXG4gICAgICAgICAgICByZW1vdmVCdG4uaW5uZXJIVE1MID0gJzxzcGFuIGNsYXNzPVwicmVtb3ZlLWljb25cIj4mdGltZXM7PC9zcGFuPic7XHJcbiAgICAgICAgICAgIHJlbW92ZUJ0bi50aXRsZSA9ICdcdTA0MjNcdTA0MzRcdTA0MzBcdTA0M0JcdTA0MzhcdTA0NDJcdTA0NEMnO1xyXG4gICAgICAgICAgICByZW1vdmVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbWJhdGFudHMgPSB0aGlzLmNvbWJhdGFudHMuZmlsdGVyKGMgPT4gYy5pZCAhPT0gY29tYmF0YW50LmlkKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2F2ZUFuZFJlbmRlcigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gSFAgQmFyXHJcbiAgICAgICAgICAgIGNvbnN0IGhwQmFyQ29udGFpbmVyID0gaXRlbS5jcmVhdGVEaXYoJ2hwLWJhci1jb250YWluZXInKTtcclxuICAgICAgICAgICAgaHBCYXJDb250YWluZXIuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wSHBCYXIgPSBocEJhckNvbnRhaW5lci5jcmVhdGVEaXYoJ3RlbXAtaHAtYmFyJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGhwQmFyID0gaHBCYXJDb250YWluZXIuY3JlYXRlRGl2KCdocC1iYXInKTtcclxuICAgICAgICAgICAgY29uc3QgaHBQZXJjZW50YWdlID0gKGNvbWJhdGFudC5jdXJyZW50SHAgLyBjb21iYXRhbnQubWF4SHApICogMTAwO1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wSHBQZXJjZW50YWdlID0gKGNvbWJhdGFudC50ZW1wSHAgLyBjb21iYXRhbnQubWF4SHApICogMTAwO1xyXG4gICAgICAgICAgICBocEJhci5zdHlsZS53aWR0aCA9IGAke01hdGgubWF4KDAsIE1hdGgubWluKDEwMCwgaHBQZXJjZW50YWdlKSl9JWA7XHJcbiAgICAgICAgICAgIHRlbXBIcEJhci5zdHlsZS53aWR0aCA9IGAke01hdGgubWF4KDAsIE1hdGgubWluKDEwMCwgdGVtcEhwUGVyY2VudGFnZSkpfSVgO1xyXG4gICAgICAgICAgICBpZiAoY29tYmF0YW50LnRlbXBIcCA+PSBjb21iYXRhbnQubWF4SHApIHtcclxuICAgICAgICAgICAgICAgIHRlbXBIcEJhci5zdHlsZS5ib3JkZXJSYWRpdXMgPSAnOHB4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRlbXBIcEJhci5zdHlsZS5ib3JkZXJSYWRpdXMgPSAnOHB4IDAgMCA4cHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRlbXBIcEJhci5zdHlsZS5vcGFjaXR5ID0gY29tYmF0YW50LnRlbXBIcCA+IDAgPyAnMC43JyA6ICcwJztcclxuICAgICAgICAgICAgLy8gXHUwNDE0XHUwNDM4XHUwNDNEXHUwNDMwXHUwNDNDXHUwNDM4XHUwNDQ3XHUwNDM1XHUwNDQxXHUwNDNBXHUwNDM4XHUwNDM5IFx1MDQ0Nlx1MDQzMlx1MDQzNVx1MDQ0MiBcdTA0M0VcdTA0NDFcdTA0M0RcdTA0M0VcdTA0MzJcdTA0M0RcdTA0M0VcdTA0MzNcdTA0M0UgXHUwNDMxXHUwNDMwXHUwNDQwXHUwNDMwXHJcbiAgICAgICAgICAgIGlmIChocFBlcmNlbnRhZ2UgPCAyNSkge1xyXG4gICAgICAgICAgICAgICAgaHBCYXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyNlNzRjM2MnOyAvLyBcdTA0M0FcdTA0NDBcdTA0MzBcdTA0NDFcdTA0M0RcdTA0NEJcdTA0MzlcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChocFBlcmNlbnRhZ2UgPCA1MCkge1xyXG4gICAgICAgICAgICAgICAgaHBCYXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyNmMzljMTInOyAvLyBcdTA0M0VcdTA0NDBcdTA0MzBcdTA0M0RcdTA0MzZcdTA0MzVcdTA0MzJcdTA0NEJcdTA0MzlcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGhwQmFyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICd2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQpJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBIUCBUZXh0XHJcbiAgICAgICAgICAgIGl0ZW0uY3JlYXRlRGl2KCdocC10ZXh0Jykuc2V0VGV4dChgXHUwNDI1XHUwNDFGOiAke2NvbWJhdGFudC5jdXJyZW50SHB9LyR7Y29tYmF0YW50Lm1heEhwfSR7Y29tYmF0YW50LnRlbXBIcCA+IDAgPyBgICsgJHtjb21iYXRhbnQudGVtcEhwfSBcdTA0MzJcdTA0NDBcdTA0MzVcdTA0M0MuYCA6ICcnfWApO1xyXG4gICAgICAgICAgICAvLyBDb250cm9sc1xyXG4gICAgICAgICAgICBjb25zdCBjb250cm9scyA9IGl0ZW0uY3JlYXRlRGl2KCdocC1jb250cm9scycpO1xyXG4gICAgICAgICAgICBjb25zdCBkYW1hZ2VJbnB1dCA9IGNvbnRyb2xzLmNyZWF0ZUVsKCdpbnB1dCcpO1xyXG4gICAgICAgICAgICBkYW1hZ2VJbnB1dC50eXBlID0gJ251bWJlcic7XHJcbiAgICAgICAgICAgIGRhbWFnZUlucHV0LmNsYXNzTmFtZSA9ICdkYW1hZ2UtaW5wdXQnO1xyXG4gICAgICAgICAgICBkYW1hZ2VJbnB1dC5wbGFjZWhvbGRlciA9ICdcdTA0MUFcdTA0M0VcdTA0M0JcdTA0MzhcdTA0NDdcdTA0MzVcdTA0NDFcdTA0NDJcdTA0MzJcdTA0M0UnO1xyXG4gICAgICAgICAgICBjb25zdCBkYW1hZ2VCdG4gPSBjb250cm9scy5jcmVhdGVFbCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIGRhbWFnZUJ0bi5jbGFzc05hbWUgPSAnYWN0aW9uLWJ0biBkYW1hZ2UtYnRuJztcclxuICAgICAgICAgICAgZGFtYWdlQnRuLnNldFRleHQoJ1x1MDQyM1x1MDQ0MFx1MDQzRVx1MDQzRCcpO1xyXG4gICAgICAgICAgICBjb25zdCBoZWFsQnRuID0gY29udHJvbHMuY3JlYXRlRWwoJ2J1dHRvbicpO1xyXG4gICAgICAgICAgICBoZWFsQnRuLmNsYXNzTmFtZSA9ICdhY3Rpb24tYnRuIGhlYWwtYnRuJztcclxuICAgICAgICAgICAgaGVhbEJ0bi5zZXRUZXh0KCdcdTA0MUJcdTA0MzVcdTA0NDdcdTA0MzVcdTA0M0RcdTA0MzhcdTA0MzUnKTtcclxuICAgICAgICAgICAgY29uc3QgdGVtcEhwQnRuID0gY29udHJvbHMuY3JlYXRlRWwoJ2J1dHRvbicpO1xyXG4gICAgICAgICAgICB0ZW1wSHBCdG4uY2xhc3NOYW1lID0gJ2FjdGlvbi1idG4gdGVtcC1ocC1idG4nO1xyXG4gICAgICAgICAgICB0ZW1wSHBCdG4uc2V0VGV4dCgnXHUwNDEyXHUwNDQwXHUwNDM1XHUwNDNDXHUwNDM1XHUwNDNEXHUwNDNEXHUwNDNFXHUwNDM1IFx1MDQyNVx1MDQxRicpO1xyXG4gICAgICAgICAgICAvLyBFdmVudCBsaXN0ZW5lcnNcclxuICAgICAgICAgICAgZGFtYWdlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gcGFyc2VJbnQoZGFtYWdlSW5wdXQudmFsdWUpIHx8IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoYW1vdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlEYW1hZ2UoY29tYmF0YW50LmlkLCBhbW91bnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZUlucHV0LnZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zYXZlQW5kUmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBoZWFsQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gcGFyc2VJbnQoZGFtYWdlSW5wdXQudmFsdWUpIHx8IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoYW1vdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlIZWFsKGNvbWJhdGFudC5pZCwgYW1vdW50KTtcclxuICAgICAgICAgICAgICAgICAgICBkYW1hZ2VJbnB1dC52YWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2F2ZUFuZFJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGVtcEhwQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gcGFyc2VJbnQoZGFtYWdlSW5wdXQudmFsdWUpIHx8IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoYW1vdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlUZW1wSHAoY29tYmF0YW50LmlkLCBhbW91bnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZUlucHV0LnZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zYXZlQW5kUmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3dBZGRDb21iYXRhbnRNb2RhbCgpOiB2b2lkIHtcclxuICAgICAgICBuZXcgQWRkQ29tYmF0YW50TW9kYWwodGhpcy5hcHAsIGFzeW5jIChjb21iYXRhbnQ6IENvbWJhdGFudCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbWJhdGFudHMucHVzaChjb21iYXRhbnQpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNhdmVBbmRSZW5kZXIoKTtcclxuICAgICAgICB9KS5vcGVuKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXBwbHlEYW1hZ2UoY29tYmF0YW50SWQ6IHN0cmluZywgYW1vdW50OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBjb21iYXRhbnQgPSB0aGlzLmNvbWJhdGFudHMuZmluZChjID0+IGMuaWQgPT09IGNvbWJhdGFudElkKTtcclxuICAgICAgICBpZiAoIWNvbWJhdGFudCkgcmV0dXJuO1xyXG4gICAgICAgIGlmIChjb21iYXRhbnQudGVtcEhwID4gMCkge1xyXG4gICAgICAgICAgICBpZiAoY29tYmF0YW50LnRlbXBIcCA+PSBhbW91bnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbWJhdGFudC50ZW1wSHAgLT0gYW1vdW50O1xyXG4gICAgICAgICAgICAgICAgYW1vdW50ID0gMDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFtb3VudCAtPSBjb21iYXRhbnQudGVtcEhwO1xyXG4gICAgICAgICAgICAgICAgY29tYmF0YW50LnRlbXBIcCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29tYmF0YW50LmN1cnJlbnRIcCA9IE1hdGgubWF4KDAsIGNvbWJhdGFudC5jdXJyZW50SHAgLSBhbW91bnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGFwcGx5SGVhbChjb21iYXRhbnRJZDogc3RyaW5nLCBhbW91bnQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGNvbWJhdGFudCA9IHRoaXMuY29tYmF0YW50cy5maW5kKGMgPT4gYy5pZCA9PT0gY29tYmF0YW50SWQpO1xyXG4gICAgICAgIGlmICghY29tYmF0YW50KSByZXR1cm47XHJcbiAgICAgICAgY29tYmF0YW50LmN1cnJlbnRIcCA9IE1hdGgubWluKGNvbWJhdGFudC5tYXhIcCwgY29tYmF0YW50LmN1cnJlbnRIcCArIGFtb3VudCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXBwbHlUZW1wSHAoY29tYmF0YW50SWQ6IHN0cmluZywgYW1vdW50OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBjb21iYXRhbnQgPSB0aGlzLmNvbWJhdGFudHMuZmluZChjID0+IGMuaWQgPT09IGNvbWJhdGFudElkKTtcclxuICAgICAgICBpZiAoIWNvbWJhdGFudCkgcmV0dXJuO1xyXG4gICAgICAgIGNvbWJhdGFudC50ZW1wSHAgPSBhbW91bnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEFkZENvbWJhdGFudE1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG4gICAgb25TdWJtaXQ6IChjb21iYXRhbnQ6IENvbWJhdGFudCkgPT4gdm9pZDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgb25TdWJtaXQ6IChjb21iYXRhbnQ6IENvbWJhdGFudCkgPT4gdm9pZCkge1xyXG4gICAgICAgIHN1cGVyKGFwcCk7XHJcbiAgICAgICAgdGhpcy5vblN1Ym1pdCA9IG9uU3VibWl0O1xyXG4gICAgfVxyXG5cclxuICAgIG9uT3BlbigpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTtcclxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gyJykuc2V0VGV4dCgnXHUwNDE0XHUwNDNFXHUwNDMxXHUwNDMwXHUwNDMyXHUwNDM4XHUwNDQyXHUwNDRDIFx1MDQ0M1x1MDQ0N1x1MDQzMFx1MDQ0MVx1MDQ0Mlx1MDQzRFx1MDQzOFx1MDQzQVx1MDQzMCcpO1xyXG4gICAgICAgIGxldCBuYW1lID0gJycsIGluaXRpYXRpdmUgPSAnJywgbWF4SHAgPSAnJztcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdcdTA0MThcdTA0M0NcdTA0NEYnKVxyXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignXHUwNDEyXHUwNDMyXHUwNDM1XHUwNDM0XHUwNDM4XHUwNDQyXHUwNDM1IFx1MDQzOFx1MDQzQ1x1MDQ0RicpXHJcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UodmFsID0+IHsgbmFtZSA9IHZhbDsgfSkpO1xyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ1x1MDQxOFx1MDQzRFx1MDQzOFx1MDQ0Nlx1MDQzOFx1MDQzMFx1MDQ0Mlx1MDQzOFx1MDQzMlx1MDQzMCcpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdcdTA0MTJcdTA0MzJcdTA0MzVcdTA0MzRcdTA0MzhcdTA0NDJcdTA0MzUgXHUwNDM4XHUwNDNEXHUwNDM4XHUwNDQ2XHUwNDM4XHUwNDMwXHUwNDQyXHUwNDM4XHUwNDMyXHUwNDQzJylcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZSh2YWwgPT4geyBpbml0aWF0aXZlID0gdmFsOyB9KSk7XHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnXHUwNDFDXHUwNDMwXHUwNDNBXHUwNDQxXHUwNDM4XHUwNDNDXHUwNDMwXHUwNDNCXHUwNDRDXHUwNDNEXHUwNDNFXHUwNDM1IFx1MDQyNVx1MDQxRicpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdcdTA0MTJcdTA0MzJcdTA0MzVcdTA0MzRcdTA0MzhcdTA0NDJcdTA0MzUgXHUwNDNDXHUwNDMwXHUwNDNBXHUwNDQxXHUwNDM4XHUwNDNDXHUwNDMwXHUwNDNCXHUwNDRDXHUwNDNEXHUwNDNFXHUwNDM1IFx1MDQyNVx1MDQxRicpXHJcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UodmFsID0+IHsgbWF4SHAgPSB2YWw7IH0pKTtcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgICAgICAgIC5hZGRCdXR0b24oYnRuID0+IGJ0blxyXG4gICAgICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoJ1x1MDQxNFx1MDQzRVx1MDQzMVx1MDQzMFx1MDQzMlx1MDQzOFx1MDQ0Mlx1MDQ0QycpXHJcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IG5hbWUudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBwYXJzZUludChpbml0aWF0aXZlKSB8fCAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG0gPSBwYXJzZUludChtYXhIcCkgfHwgMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobiAmJiBtID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU3VibWl0KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhdGl2ZTogaSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heEhwOiBtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEhwOiBtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEhwOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2xvc2UoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5pdGlhdGl2ZVRyYWNrZXJQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG4gICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJWaWV3KFxyXG4gICAgICAgICAgICBWSUVXX1RZUEUsXHJcbiAgICAgICAgICAgIChsZWFmKSA9PiBuZXcgSW5pdGlhdGl2ZVRyYWNrZXJWaWV3KGxlYWYsIHRoaXMpXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmFkZFJpYmJvbkljb24oJ3BsdXMnLCAnXHUwNDFFXHUwNDQyXHUwNDNBXHUwNDQwXHUwNDRCXHUwNDQyXHUwNDRDIFx1MDQ0Mlx1MDQ0MFx1MDQzNVx1MDQzQVx1MDQzNVx1MDQ0MCBcdTA0MzhcdTA0M0RcdTA0MzhcdTA0NDZcdTA0MzhcdTA0MzBcdTA0NDJcdTA0MzhcdTA0MzJcdTA0NEInLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZhdGVWaWV3KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgYWN0aXZhdGVWaWV3KCkge1xyXG4gICAgICAgIGxldCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEUpWzBdO1xyXG4gICAgICAgIGlmICghbGVhZikge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdMZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldFJpZ2h0TGVhZihmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChuZXdMZWFmKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBuZXdMZWFmLnNldFZpZXdTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVklFV19UWVBFLFxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLnJldmVhbExlYWYobmV3TGVhZik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2UucmV2ZWFsTGVhZihsZWFmKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2F2ZUNvbWJhdGFudHMoY29tYmF0YW50czogQ29tYmF0YW50W10pIHtcclxuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKGNvbWJhdGFudHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGxvYWRDb21iYXRhbnRzKCk6IFByb21pc2U8Q29tYmF0YW50W10+IHtcclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5sb2FkRGF0YSgpO1xyXG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGRhdGEpID8gZGF0YSA6IFtdO1xyXG4gICAgfVxyXG59ICJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQXFFO0FBV3JFLElBQU0sWUFBWTtBQUVYLDBDQUFvQyx5QkFBUztBQUFBLEVBSWhELFlBQVksTUFBcUIsUUFBaUM7QUFDOUQsVUFBTTtBQUpWLHNCQUEwQjtBQUt0QixTQUFLLFNBQVM7QUFBQTtBQUFBLEVBR2xCLGNBQXNCO0FBQ2xCLFdBQU87QUFBQTtBQUFBLEVBR1gsaUJBQXlCO0FBQ3JCLFdBQU87QUFBQTtBQUFBLFFBR0wsU0FBd0I7QUFDMUIsU0FBSyxhQUFhLE1BQU0sS0FBSyxPQUFPO0FBQ3BDLFVBQU0sWUFBWSxLQUFLO0FBQ3ZCLGNBQVU7QUFDVixjQUFVLFNBQVM7QUFDbkIsY0FBVSxTQUFTO0FBQ25CLFNBQUssY0FBYztBQUFBO0FBQUEsUUFHakIsZ0JBQWdCO0FBQ2xCLFVBQU0sS0FBSyxPQUFPLGVBQWUsS0FBSztBQUN0QyxVQUFNLE9BQU8sS0FBSyxZQUFZLGNBQWM7QUFDNUMsUUFBSSxnQkFBZ0IsYUFBYTtBQUM3QixXQUFLLGlCQUFpQjtBQUFBO0FBQUE7QUFBQSxFQUk5QixjQUFjLFdBQThCO0FBRXhDLFVBQU0sU0FBUyxVQUFVLFVBQVU7QUFDbkMsV0FBTyxNQUFNLGlCQUFpQjtBQUM5QixVQUFNLFlBQVksT0FBTyxTQUFTO0FBQ2xDLGNBQVUsU0FBUztBQUNuQixjQUFVLFlBQVk7QUFDdEIsY0FBVSxRQUFRO0FBQ2xCLGNBQVUsaUJBQWlCLFNBQVMsTUFBTSxLQUFLO0FBRy9DLFVBQU0sT0FBTyxVQUFVLFVBQVU7QUFDakMsU0FBSyxpQkFBaUI7QUFBQTtBQUFBLEVBRzFCLGlCQUFpQixXQUE4QjtBQUMzQyxjQUFVO0FBRVYsVUFB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LGFBQU87QUFBQTtBQUNsQyxRQUFJLHdCQUFRLFdBQ1AsUUFBUSxnRUFDUixRQUFRLFVBQVEsS0FDWixlQUFlLDJHQUNmLFNBQVMsU0FBTztBQUFFLG1CQUFhO0FBQUE7QUFDeEMsUUFBSSx3QkFBUSxXQUNQLFFBQVEseUZBQ1IsUUFBUSxVQUFRLEtBQ1osZUFBZSxvSUFDZixTQUFTLFNBQU87QUFBRSxjQUFRO0FBQUE7QUFDbkMsUUFBSSx3QkFBUSxXQUNQLFVBQVUsU0FBTyxJQUNiLGNBQWMsb0RBQ2QsUUFBUSxNQUFNO0FBQ1gsWUFBTSxJQUFJLEtBQUs7QUFDZixZQUFNLElBQUksU0FBUyxlQUFlO0FBQ2xDLFlBQU0sSUFBSSxTQUFTLFVBQVU7QUFDN0IsVUFBSSxLQUFLLElBQUksR0FBRztBQUNaLGFBQUssU0FBUztBQUFBLFVBQ1YsSUFBSSxLQUFLLE1BQU07QUFBQSxVQUNmLE1BQU07QUFBQSxVQUNOLFlBQVk7QUFBQSxVQUNaLE9BQU87QUFBQSxVQUNQLFdBQVc7QUFBQSxVQUNYLFFBQVE7QUFBQTtBQUVaLGFBQUs7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUt6QixVQUFnQjtBQUNaLFNBQUssVUFBVTtBQUFBO0FBQUE7QUFJdkIsNENBQXFELHVCQUFPO0FBQUEsUUFDbEQsU0FBUztBQUNYLFNBQUssYUFDRCxXQUNBLENBQUMsU0FBUyxJQUFJLHNCQUFzQixNQUFNO0FBRTlDLFNBQUssY0FBYyxRQUFRLGdKQUE2QixNQUFNO0FBQzFELFdBQUs7QUFBQTtBQUFBO0FBQUEsUUFJUCxlQUFlO0FBQ2pCLFFBQUksT0FBTyxLQUFLLElBQUksVUFBVSxnQkFBZ0IsV0FBVztBQUN6RCxRQUFJLENBQUMsTUFBTTtBQUNQLFlBQU0sVUFBVSxLQUFLLElBQUksVUFBVSxhQUFhO0FBQ2hELFVBQUksU0FBUztBQUNULGNBQU0sUUFBUSxhQUFhO0FBQUEsVUFDdkIsTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBO0FBRVosYUFBSyxJQUFJLFVBQVUsV0FBVztBQUFBO0FBQUEsV0FFL0I7QUFDSCxXQUFLLElBQUksVUFBVSxXQUFXO0FBQUE7QUFBQTtBQUFBLFFBSWhDLGVBQWUsWUFBeUI7QUFDMUMsVUFBTSxLQUFLLFNBQVM7QUFBQTtBQUFBLFFBR2xCLGlCQUF1QztBQUN6QyxVQUFNLE9BQU8sTUFBTSxLQUFLO0FBQ3hCLFdBQU8sTUFBTSxRQUFRLFFBQVEsT0FBTztBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
